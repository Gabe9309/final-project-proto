// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "weather/weather.proto" (package "weather_service", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WeatherService } from "./weather";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetCurrentConditionsResponse } from "./weather";
import type { GetCurrentConditionsRequest } from "./weather";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service weather_service.WeatherService
 */
export interface IWeatherServiceClient {
    /**
     * @generated from protobuf rpc: GetCurrentConditions(weather_service.GetCurrentConditionsRequest) returns (weather_service.GetCurrentConditionsResponse);
     */
    getCurrentConditions(input: GetCurrentConditionsRequest, options?: RpcOptions): UnaryCall<GetCurrentConditionsRequest, GetCurrentConditionsResponse>;
}
/**
 * @generated from protobuf service weather_service.WeatherService
 */
export class WeatherServiceClient implements IWeatherServiceClient, ServiceInfo {
    typeName = WeatherService.typeName;
    methods = WeatherService.methods;
    options = WeatherService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCurrentConditions(weather_service.GetCurrentConditionsRequest) returns (weather_service.GetCurrentConditionsResponse);
     */
    getCurrentConditions(input: GetCurrentConditionsRequest, options?: RpcOptions): UnaryCall<GetCurrentConditionsRequest, GetCurrentConditionsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCurrentConditionsRequest, GetCurrentConditionsResponse>("unary", this._transport, method, opt, input);
    }
}
