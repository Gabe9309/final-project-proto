// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "weather/weather.proto" (package "weather_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message weather_service.WeatherData
 */
export interface WeatherData {
    /**
     * @generated from protobuf field: string location = 1;
     */
    location: string;
    /**
     * @generated from protobuf field: double temperature = 2;
     */
    temperature: number;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class WeatherData$Type extends MessageType<WeatherData> {
    constructor() {
        super("weather_service.WeatherData", [
            { no: 1, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "temperature", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WeatherData>): WeatherData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.location = "";
        message.temperature = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<WeatherData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeatherData): WeatherData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string location */ 1:
                    message.location = reader.string();
                    break;
                case /* double temperature */ 2:
                    message.temperature = reader.double();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeatherData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string location = 1; */
        if (message.location !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.location);
        /* double temperature = 2; */
        if (message.temperature !== 0)
            writer.tag(2, WireType.Bit64).double(message.temperature);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message weather_service.WeatherData
 */
export const WeatherData = new WeatherData$Type();
/**
 * @generated ServiceType for protobuf service weather_service.WeatherService
 */
export const WeatherService = new ServiceType("weather_service.WeatherService", [
    { name: "GetWeather", options: {}, I: WeatherData, O: WeatherData }
]);
