// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: mongo/mongo.proto

package mongo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoServiceClient is the client API for MongoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoServiceClient interface {
	SetupCollection(ctx context.Context, in *SetupCollectionRequest, opts ...grpc.CallOption) (*SetupCollectionResponse, error)
	InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*InsertDocumentResponse, error)
	FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error)
}

type mongoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoServiceClient(cc grpc.ClientConnInterface) MongoServiceClient {
	return &mongoServiceClient{cc}
}

func (c *mongoServiceClient) SetupCollection(ctx context.Context, in *SetupCollectionRequest, opts ...grpc.CallOption) (*SetupCollectionResponse, error) {
	out := new(SetupCollectionResponse)
	err := c.cc.Invoke(ctx, "/mongo.MongoService/SetupCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*InsertDocumentResponse, error) {
	out := new(InsertDocumentResponse)
	err := c.cc.Invoke(ctx, "/mongo.MongoService/InsertDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoServiceClient) FindDocuments(ctx context.Context, in *FindDocumentsRequest, opts ...grpc.CallOption) (*FindDocumentsResponse, error) {
	out := new(FindDocumentsResponse)
	err := c.cc.Invoke(ctx, "/mongo.MongoService/FindDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoServiceServer is the server API for MongoService service.
// All implementations must embed UnimplementedMongoServiceServer
// for forward compatibility
type MongoServiceServer interface {
	SetupCollection(context.Context, *SetupCollectionRequest) (*SetupCollectionResponse, error)
	InsertDocument(context.Context, *InsertDocumentRequest) (*InsertDocumentResponse, error)
	FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error)
	mustEmbedUnimplementedMongoServiceServer()
}

// UnimplementedMongoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMongoServiceServer struct {
}

func (UnimplementedMongoServiceServer) SetupCollection(context.Context, *SetupCollectionRequest) (*SetupCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupCollection not implemented")
}
func (UnimplementedMongoServiceServer) InsertDocument(context.Context, *InsertDocumentRequest) (*InsertDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDocument not implemented")
}
func (UnimplementedMongoServiceServer) FindDocuments(context.Context, *FindDocumentsRequest) (*FindDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocuments not implemented")
}
func (UnimplementedMongoServiceServer) mustEmbedUnimplementedMongoServiceServer() {}

// UnsafeMongoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoServiceServer will
// result in compilation errors.
type UnsafeMongoServiceServer interface {
	mustEmbedUnimplementedMongoServiceServer()
}

func RegisterMongoServiceServer(s grpc.ServiceRegistrar, srv MongoServiceServer) {
	s.RegisterService(&MongoService_ServiceDesc, srv)
}

func _MongoService_SetupCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).SetupCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongo.MongoService/SetupCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).SetupCollection(ctx, req.(*SetupCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_InsertDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).InsertDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongo.MongoService/InsertDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).InsertDocument(ctx, req.(*InsertDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoService_FindDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoServiceServer).FindDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongo.MongoService/FindDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoServiceServer).FindDocuments(ctx, req.(*FindDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoService_ServiceDesc is the grpc.ServiceDesc for MongoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongo.MongoService",
	HandlerType: (*MongoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupCollection",
			Handler:    _MongoService_SetupCollection_Handler,
		},
		{
			MethodName: "InsertDocument",
			Handler:    _MongoService_InsertDocument_Handler,
		},
		{
			MethodName: "FindDocuments",
			Handler:    _MongoService_FindDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongo/mongo.proto",
}
